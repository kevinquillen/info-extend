<?php

/**
 * Define expanded directives.
 * @return array
 */
function info_extend_expanded_directives() {
  return array(
    'compliments',
    'suggests',
    'recommends',
    'breaks',
    'conflicts',
    'replaces',
    'enhances'
  );
}

/**
 * Implements hook_theme().
 * @return array
 */
function info_extend_theme() {
  return array(
    'info_extend_fieldset' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Format a project name into a readable format.
 * @param $item
 * @return string
 */
function info_extend_format_name($item) {
  return drupal_ucfirst(str_replace('_', ' ', $item));
}

/**
 * Format a link based on its type.
 * @param string $type
 * @param $item
 * @return string
 */
function info_extend_format_link($type = 'project', $item) {
  switch ($type) {
    case 'project':
      return l(info_extend_format_name($item), 'http://drupal.org/project/' . $item, array('absolute' => TRUE, 'external' => TRUE, 'attributes' => array('target' => '_blank')));
      break;
    case 'issue':
      $node_id = end(explode('/', $item));
      return l('Issue #' . $node_id, 'http://drupal.org/node/' . $node_id, array('absolute' => TRUE, 'external' => TRUE, 'attributes' => array('target' => '_blank')));
      break;
    default:
      break;
  }
}

/**
 * Return the status of a module.
 * @param $module_name
 * @return string
 */
function info_extend_get_status($module_name) {
  $exists = module_exists($module_name);

  if ($exists) {
    return ' (<span class="admin-enabled">enabled</span>)';
  } else {
    $result = db_query("SELECT name FROM {system} WHERE type = :type AND name = :name", array(':type' => 'module', ':name' => $module_name))->fetchField();
    return $result ? ' (<span class="admin-disabled">disabled</span>)' : ' (<span class="admin-missing">missing</span>)';
  }
}

/**
 * Implements hook_form_system_modules_alter().
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function info_extend_form_system_modules_alter(&$form, &$form_state, $form_id) {
  $expanded_directives = info_extend_expanded_directives();
  $result = db_query("SELECT * FROM {system} WHERE type = :type ORDER BY weight ASC, name ASC", array(':type' => 'module'));

  foreach ($result as $record) {
    $info = unserialize($record->info);
    foreach ($info as $key => $value) {
      if (in_array($key, $expanded_directives)) {
        $items = array();

        foreach ($info[$key] as $item) {
          if (preg_match('/ \| /', $item)) {
            $split = explode(' | ', $item);
            $items[] = info_extend_format_link('project', $split[0]) . ' :: ' . info_extend_format_link('issue', $split[1]) . ' ' . info_extend_get_status($item);
          } else {
            $items[] = info_extend_format_link('project', $item) . ' ' . info_extend_get_status($item);
          }
        }

        if (count($items)) {
          $form['modules'][$info['package']][$record->name]['#' . $key] = $items;
        }
      }
    }

    foreach (element_children($form['modules']) as $package) {
      $form['modules'][$package]['#theme'] = 'info_extend_fieldset';
    }
  }
}

/**
 * Theme function. Similar to system_modules_fieldset, but adds in additional module directives.
 * @param $variables
 * @return string
 */
function theme_info_extend_fieldset($variables) {
  $form = $variables['form'];

  // Individual table headers.
  $rows = array();
  // Iterate through all the modules, which are
  // children of this fieldset.
  foreach (element_children($form) as $key) {
    // Stick it into $module for easier accessing.
    $module = $form[$key];
    $row = array();
    unset($module['enable']['#title']);
    $row[] = array('class' => array('checkbox'), 'data' => drupal_render($module['enable']));
    $label = '<label';
    if (isset($module['enable']['#id'])) {
      $label .= ' for="' . $module['enable']['#id'] . '"';
    }
    $row[] = $label . '><strong>' . drupal_render($module['name']) . '</strong></label>';
    $row[] = drupal_render($module['version']);
    // Add the description, along with any modules it requires.
    $description = drupal_render($module['description']);
    if ($module['#requires']) {
      $description .= '<div class="admin-requirements">' . t('Requires: !module-list', array('!module-list' => implode(', ', $module['#requires']))) . '</div>';
    }
    if ($module['#required_by']) {
      $description .= '<div class="admin-requirements">' . t('Required by: !module-list', array('!module-list' => implode(', ', $module['#required_by']))) . '</div>';
    }

    $expanded_directives = info_extend_expanded_directives();

    foreach ($expanded_directives as $directive) {
      if (in_array($directive, $module) && count($module['#' . $directive])) {
        $description .= '<div class="admin-requirements">' . t('!directive: !module-list', array('!directive' => drupal_ucfirst($directive), '!module-list' => implode(', ', $module['#' . $directive]))) . '</div>';
      }
    }

    $row[] = array('data' => $description, 'class' => array('description'));
    // Display links (such as help or permissions) in their own columns.
    foreach (array('help', 'permissions', 'configure') as $key) {
      $row[] = array('data' => drupal_render($module['links'][$key]), 'class' => array($key));
    }
    $rows[] = $row;
  }

  return theme('table', array('header' => $form['#header'], 'rows' => $rows));
}